import requests
import argparse
import logging
import json
import hmac
import base64
import hashlib
from datetime import datetime
import csv
# from jwt import JWT

authdb_url = {
                'demo': 'https://authdb.demo.ghcg.com/{}',
                'stage': 'https://authdb.stage.ghcg.com/{}',
                'test':  'https://authdb.test.zorg.sh/{}',
                'cprod': 'https://authdb.cprod.zorg.sh:8080/{}',
                'prod': 'https://authdb.prod.ghcg.com/{}'
}

auth_api_urls = {
    'test': 'http://internal-gateways3.test.zorg.sh:8310/api/1.0/{}',
    'stage': 'http://web-platform2.stage.zorg.sh:8310/api/1.0/{}',
    'prod': 'http://ld44.prod.zorg.sh:8310/api/1.0/{}',
    'cprod': 'http://fix-bridges7.cprod.zorg.sh:8310/api/1.0/{}',
    'demo': 'http://api4.demo.zorg.sh:8310/api/1.0/{}'
}

headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }

auth_scopes = ['symbols', 'feed', 'orders', 'ohlc', 'change',
               'crossrates', 'summary', 'transactions']

jwt_header = {
        'typ': 'JWT',
        'alg': 'HS256'}


def create_session(url=authdb_url['test'], service='backoffice',
                   user='adya@exante.eu', passwd='1605', ttl=3600000):
    """
    :param url: authdb url
    :param service: 'backoffice', 'api'
    :param user: username
    :param passwd: username's password
    :param ttl: milliseconds default is equal 1 hour
    :return: http response
    """

    payload = {
        "password": passwd,
        "service": service,
        "ttl": ttl,
        "username": user
    }
    try:
        return requests.post(url.format('api/1.0/auth/session'),
                             headers=headers, json=payload, verify=False).json()
    except ValueError as err:
        logging.debug(str(err))
        return None


def get_client(bo_session_id, auth_api_url=auth_api_urls.get('test'), user=None):
    """
    :param bo_session_id: session id generated by create_session
    :param auth_api_url: auth server url
    :param user: exante username
    :return: http api client id
    """
    auth_headers = {**headers, 'X-Auth-Sessionid': bo_session_id}
    try:
        result = requests.get(url=auth_api_url.format('clients'), headers=auth_headers).json()
    except ValueError as err:
        result = None
        logging.debug(str(err))
    if user and result:
        try:
            client_id = next(item for item in result if item['username'] == user)
        except StopIteration:
            client_id = {}
        return client_id
    elif user is None and result:
        return result


def create_client(bo_session_id, auth_api_url=auth_api_urls.get('test'),
                  user='adya@exante.eu'):
    auth_headers = {**headers, 'X-Auth-Sessionid': bo_session_id}
    try:
        return requests.post(url=auth_api_url.format('clients'), headers=auth_headers,
                             json={'username': user}).json()
    except ValueError as err:
        logging.debug(str(err))
        return None


def get_app(bo_session_id, client_id, auth_api_url=auth_api_urls.get('test')):
    """
    :param bo_session_id: backoffice session
    :param client_id: api clent id
    :param auth_api_url: auth server URL
    :return: list of api apps
    """
    auth_headers = {**headers, 'X-Auth-Sessionid': bo_session_id}
    try:
        return requests.get(url=auth_api_url.format('clients/{}/apps'.format(client_id)),
                            headers=auth_headers).json()
    except ValueError as err:
        logging.debug(str(err))
        return None


def create_app(bo_session_id, client_id, api_session_id, app_key,
               auth_api_url=auth_api_urls.get('test')):
    """
    :param bo_session_id: backoffice session
    :param client_id: http api client
    :param api_session_id: http API session
    :param app_key: open app key
    :param auth_api_url: auth server url
    :return:
    """
    auth_headers = {**headers, 'X-Auth-Sessionid': bo_session_id}

    payload = {
        'sessionId': api_session_id,
        'sharedKey': app_key
    }

    try:
        return requests.post(url=auth_api_url.format('clients/{}/apps'.format(client_id)),
                             headers=auth_headers, json=payload).json()
    except ValueError as err:
        logging.debug(str(err))


def update_app(bo_session_id, client_id, new_app_key, app_id, auth_api_url=auth_api_urls.get('test')):
    auth_headers = {**headers, 'X-Auth-Sessionid': bo_session_id}

    payload = {
        'sharedKey': new_app_key
    }

    try:
        return requests.put(url=auth_api_url.format('clients/{}/apps/{}'.format(client_id, app_id)),
                            headers=auth_headers, data=json.dumps(payload)).json()
    except ValueError as err:
        logging.debug(str(err))


def delete_app(bo_session_id, client_id, app_id, auth_api_url=auth_api_urls.get('test')):
    """
    :param bo_session_id: backoffice session
    :param client_id: http api client
    :param app_id: api application id
    :param auth_api_url: auth server url
    :return: True in case of success
    """
    auth_headers = {**headers, 'X-Auth-Sessionid': bo_session_id}

    if requests.delete(url=auth_api_url.format('clients/{}/apps/{}'.format(client_id, app_id)),
                       headers=auth_headers).status_code == 204:
        return True
    else:
        return False


def add_api_key(bo_session_id, client_id, app_id, scope_list, auth_api_url=auth_api_urls.get('test')):
    """
    :param bo_session_id:
    :param client_id:
    :param app_id:
    :param scope_list:
    :param auth_api_url:
    :return:
    """
    auth_headers = {**headers, 'X-Auth-Sessionid': bo_session_id}
    payload = {'scopes': None}
    if isinstance(scope_list, list):
        payload['scopes'] = scope_list
    elif isinstance(scope_list, str):
        payload['scopes'] = [scope_list]
    try:
        return requests.post(url=auth_api_url.format('clients/{}/apps/{}/keys'.format(client_id, app_id)),
                             headers=auth_headers, json=payload).json()
    except ValueError as err:
        logging.debug(str(err))


def get_api_keys(bo_session_id, client_id, app_id, auth_api_url=auth_api_urls.get('test')):
    """
    :param bo_session_id:
    :param client_id:
    :param app_id:
    :param auth_api_url:
    :return:
    """
    auth_headers = {**headers, 'X-Auth-Sessionid': bo_session_id}
    try:
        return requests.get(url=auth_api_url.format('clients/{}/apps/{}/keys'.format(client_id, app_id)),
                            headers=auth_headers).json()
    except ValueError as err:
        logging.debug(str(err))


def del_api_keys(bo_session_id, client_id, app_id, key_id, auth_api_url=auth_api_urls.get('test')):
    auth_headers = {**headers, 'X-Auth-Sessionid': bo_session_id}

    if requests.delete(url=auth_api_url.format('clients/{}/apps/{}/key/{}'.format(client_id, app_id, key_id)),
                       headers=auth_headers).status_code == 204:
        return True
    else:
        return False
    pass


def create_jwt_token(client_id, app_id, app_key, expire=1735716600,
                     scopes=auth_scopes):
    """
    :param client_id:
    :param app_id:
    :param app_key:
    :param expire:
    :param scopes:
    :return:
    """

    jwt_claims = {
        'iss': client_id,
        'sub': app_id,
        'iat': None,
        'exp': None,
        'aud': scopes
    }

    exp = None

    if isinstance(expire, int):
        exp = expire
    elif isinstance(expire, str):
        exp = int(datetime.timestamp(datetime.strptime(expire, '%Y-%m-%dT%H:%M:%S')))

    jwt_claims['exp'] = exp
    jwt_claims['iat'] = datetime.timestamp(datetime.utcnow())

    logging.debug('jwt claims: {}'.format(jwt_claims))

    body = (base64.urlsafe_b64encode(json.dumps(jwt_header, separators=(',', ':')).encode('utf-8')) + b'.' +
            base64.urlsafe_b64encode(json.dumps(jwt_claims, separators=(',', ':')).encode('utf-8')))

    sign = base64.urlsafe_b64encode(hmac.new(app_key.encode('utf-8'),
                                             body,
                                             hashlib.sha256).digest())

    return str(body + b'.' + sign, 'utf-8')


# def create_jwt_token(client_id, app_id, app_key, expire=1735716600,
#                      scopes=auth_scopes, use_jwt_lib=True):
#
#     jwt_claims = {
#         'iss': client_id,
#         'sub': app_id,
#         'iat': None,
#         'exp': None,
#         'aud': scopes
#     }
#
#     exp = None
#
#     if isinstance(expire, int):
#         exp = expire
#     elif isinstance(expire, str):
#         exp = int(datetime.timestamp(datetime.strptime(expire, '%Y-%m-%dT%H:%M:%S')))
#
#     jwt_claims['exp'] = exp
#     jwt_claims['iat'] = datetime.timestamp(datetime.utcnow())
#
#     logging.debug('jwt claims: {}'.format(jwt_claims))
#
#     if use_jwt_lib:
#         tokenizer = JWT()
#         token = tokenizer.encode(jwt_claims, app_key, 'HS256')
#
#     else:
#         body = (base64.urlsafe_b64encode(json.dumps(jwt_header, separators=(',', ':')).encode('utf-8')) + b'.' +
#             base64.urlsafe_b64encode(json.dumps(jwt_claims, separators=(',', ':')).encode('utf-8')))
#
#         sign = base64.urlsafe_b64encode(hmac.new(app_key.encode('utf-8'),
#                                              body,
#                                              hashlib.sha256).digest())
#
#         token = str(body + b'.' + sign, 'utf-8')
#
#     return token

def save_creds(fname='./creds.csv'):
    """
    :param fname: credential file name
    :return:
    """
    with open(fname, 'a') as f:
        writer = csv.writer(f)
        writer.write_row(('username', 'clientid', 'key'))


if __name__ == '__main__':
    aparser = argparse.ArgumentParser()
    aparser.add_argument('-e', '--env', default='test')
    aparser.add_argument('-u', '--user', default='adya@exante.eu')
    aparser.add_argument('-p', '--passwd', help='authdb user password')
    aparser.add_argument('-b', '--bo-session', help='working bo session Id')
    aparser.add_argument('--log-level', choices=('debug', 'error', 'info'), default='info')
    args = aparser.parse_args()

    logging.basicConfig(level=args.log_level.upper())
    if args.bo_session is None:
        bo_session = create_session(url=authdb_url.format('{}', env=args.env),
                                    service='backoffice', user=args.user, passwd=args.passwd)
    else:
        bo_session = {'sessionid': args.bo_session}

    print('BO session:', bo_session)

    api_client = get_client(bo_session_id=bo_session.get('sessionid'),
                            auth_api_url=auth_api_urls.get(args.env), user=args.user)

    print('API client:', api_client)

    apps = get_app(bo_session_id=bo_session.get('sessionid'),
                   client_id=api_client.get('clientId'), auth_api_url=auth_api_urls.get(args.env))

    print('apps:', apps)
